#!/usr/bin/env python
from jinja2 import Environment, FileSystemLoader
import os
from subprocess import call

def generate_broker_manifest():
    broker_manifest_file_name = 'broker-deploy-manifest.yml'
    broker_manifest_template_file = 'broker-deploy-manifest.template.yml'
    container_path = os.getcwd()
    template_folder= os.path.join(container_path, 'ci/templates')
    broker_manifest_file_path = os.path.join(template_folder, broker_manifest_file_name)

    env = Environment(loader=FileSystemLoader(template_folder))
    template = env.get_template(broker_manifest_template_file)
    broker_plans=os.environ['BROKER_PLANS'].split(',')
    rendered = template.render(
        broker_password=os.environ['BROKER_PASSWORD'],
        broker_plans=broker_plans,
        broker_port=os.environ['BROKER_PORT'],
        broker_service_name=os.environ['BROKER_SERVICE_NAME'],
        broker_service_uuid=os.environ['BROKER_SERVICE_UUID'],
        broker_username=os.environ['BROKER_USERNAME'],
        cf_domain=os.environ['CF_DOMAIN'],
        cf_password=os.environ['CF_PASSWORD'],
        cf_username=os.environ['CF_USERNAME'],
        diego_driver_name=os.environ['DIEGO_DRIVER_NAME'],
        libstorage_uri=os.environ['LIBSTORAGE_URI'],
        static_ip=os.environ['STATIC_IP']
    )
    print(rendered)
    with open(broker_manifest_file_path, 'w') as f:
        f.write(rendered)

    return broker_manifest_file_path

def bosh_deploy(manifest_path):
    call(["bosh", "deployment", manifest_path])
    call(["bosh", "-n", "deploy"])
    call(["bosh", "-n", "run", "errand", "register-broker"])
    call(["bosh", "-n", "run", "errand", "deregister-broker"])

def main():
    manifest_path = generate_broker_manifest()
    bosh_deploy(manifest_path)

if __name__ == '__main__':
    main()
